import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { ApiError } from '../utils/error-handler';
import config from '../config/config';
import { catchAsync } from '../utils/catchAsync';

// Extend Express Request interface
declare global {
  namespace Express {
    interface Request {
      user?: {
        id: string;
      };
    }
  }
}

// Interface for JWT payload
interface JwtPayload {
  id: string;
  iat: number;
  exp: number;
}

export const protect = catchAsync(async (req: Request, _res: Response, next: NextFunction) => {
  let token: string | undefined;

  // Check for token in Authorization header
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    // Get token from header
    token = req.headers.authorization.split(' ')[1];
  }

  // Make sure token exists
  if (!token) {
    return next(new ApiError(401, 'Not authorized to access this route'));
  }

  try {
    // Verify token
    const decoded = jwt.verify(token, config.jwt.secret) as JwtPayload;

    // 3) Check if user still exists
    // const currentUser = await User.findById(decoded.id);
    // if (!currentUser) {
    //   return next(
    //     new AppError(
    //       'The user belonging to this token does no longer exist.',
    //       401
    //     )
    //   );
    // }

    // 4) Check if user changed password after the token was issued
    // if (currentUser.changedPasswordAfter(decoded.iat)) {
    //   return next(
    //     new AppError('User recently changed password! Please log in again.', 401)
    //   );
    // }

    // GRANT ACCESS TO PROTECTED ROUTE
    // (req as any).user = currentUser; // Attach user to request
    (req as any).user = { id: decoded.id }; // Attach decoded ID as placeholder
    next();
  } catch (error) {
    return next(new ApiError(401, 'Not authorized to access this route'));
  }
});

// Optional auth middleware that doesn't throw error if no token
export const optionalAuth = async (req: Request, res: Response, next: NextFunction) => {
  try {
    let token: string | undefined;

    if (req.headers.authorization?.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }

    if (!token) {
      return next();
    }

    try {
      const decoded = jwt.verify(token, config.jwt.secret) as { id: string };
      // const user = await User.findById(decoded.id).select('-password');
      // if (user) {
      //   req.user = user;
      // }
    } catch (error) {
      // Ignore token verification errors
    }
    next();
  } catch (error) {
    next(error);
  }
};