import { Request, Response, NextFunction } from 'express';
import config from '../config/config';
import { catchAsync } from '../utils/catchAsync';
import AppError from '../utils/appError';
import { StatusCodes } from 'http-status-codes';
import { ApiError } from '../utils/error-handler';
import { generateToken } from '../utils/jwt';

// Type for user data in response
interface UserData {
  _id: string;
  name: string;
  email: string;
  dateOfBirth?: Date;
  panId?: string;
  profileImage?: string;
  token?: string;
}

/**
 * @desc    Register a new user
 * @route   POST /api/auth/register
 * @access  Public
 */
export const register = catchAsync(async (req: Request, res: Response, next: NextFunction) => {
  // const { name, email, password } = req.body;

  // // Check if user already exists
  // const existingUser = await User.findOne({ email });
  // if (existingUser) {
  //   return next(new AppError('User already exists', 400));
  // }

  // // Create new user
  // const user = await User.create({ name, email, password });

  // // Generate JWT token
  // const token = generateToken(user._id);

  // res.status(201).json({
  //   status: 'success',
  //   token,
  //   data: {
  //     user,
  //   },
  // });
  res.status(501).json({ status: 'error', message: 'Not Implemented due to DB removal' }); // Placeholder
});

/**
 * @desc    Login user
 * @route   POST /api/auth/login
 * @access  Public
 */
export const login = catchAsync(async (req: Request, res: Response, next: NextFunction) => {
  // const { email, password } = req.body;

  // // Check if email and password exist
  // if (!email || !password) {
  //   return next(new AppError('Please provide email and password', 400));
  // }

  // // Check if user exists && password is correct
  // const user = await User.findOne({ email }).select('+password');

  // if (!user || !(await user.comparePassword(password))) {
  //   return next(new AppError('Incorrect email or password', 401));
  // }

  // // If everything ok, send token to client
  // const token = generateToken(user._id);

  // res.status(200).json({
  //   status: 'success',
  //   token,
  // });
   res.status(501).json({ status: 'error', message: 'Not Implemented due to DB removal' }); // Placeholder
});

/**
 * @desc    Get current logged in user
 * @route   GET /api/auth/me
 * @access  Private
 */
export const getCurrentUser = catchAsync(async (req: Request, res: Response) => {
  // const user = await User.findById(req.user.id);

  res.status(200).json({
    success: true,
    // data: user
  });
});

/**
 * @desc    Update user profile
 * @route   PUT /api/auth/profile
 * @access  Private
 */
export const updateProfile = catchAsync(async (req: Request, res: Response, next: NextFunction) => {
  const { name, email } = req.body;

  // Build update object
  // const updateFields: Partial<IUser> = {};
  // if (name) updateFields.name = name;
  // if (email) updateFields.email = email;

  // // Check if email already exists for another user
  // if (email) {
  //   const existingUser = await User.findOne({ email });
  //   if (existingUser && existingUser._id.toString() !== req.user.id) {
  //     return next(new ApiError(400, 'Email already in use'));
  //   }
  // }

  // const user = await User.findByIdAndUpdate(
  //   req.user.id,
  //   updateFields,
  //   { new: true, runValidators: true }
  // );

  res.status(200).json({
    success: true,
    // data: user
  });
});

/**
 * @desc    Upload profile image
 * @route   POST /api/auth/profile/image
 * @access  Private
 */
export const updateProfileImage = catchAsync(async (req: Request, res: Response, next: NextFunction) => {
  if (!req.file) {
    return next(new ApiError(400, 'Please upload an image'));
  }

  // const user = await User.findByIdAndUpdate(
  //   req.user.id,
  //   { profileImage: `/uploads/${req.file.filename}` },
  //   { new: true }
  // );

  res.status(200).json({
    success: true,
    // data: user
  });
});

/**
 * @desc    Logout user / clear cookie
 * @route   GET /api/auth/logout
 * @access  Private
 */
export const logout = (_req: Request, res: Response) => {
  res.status(200).json({
    success: true,
    message: 'Logged out successfully'
  });
};

// Helper function to send token response
const sendTokenResponse = (user: any, statusCode: number, res: Response) => {
  // Create token
  const token = user.getSignedToken();

  // Remove password from output
  user.password = undefined;

  res.status(statusCode).json({
    success: true,
    token,
    data: user,
  });
};
